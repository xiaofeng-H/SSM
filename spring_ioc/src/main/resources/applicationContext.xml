<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--id：Bean实例在Spring容器中的唯一标识（不允许重复）-->
    <!--class：要实例化的Bean的全限定名-->

    <!--scope：指对象的作用范围（singleton：默认值，单例的；prototype：多例的）-->
    <!--singleton：Bean实例化1个；当Spring核心文件被加载时，实例化配置的Bean实例。
        生命周期：
            对象创建：当应用加载，创建容器时，对象就被创建了
            对象运行：只要容器在，对象一直活着
            对象销毁：当应用卸载，销毁容器时，对象就被销毁了-->

    <!--prototype：Bean实例化多个；当调用getBean()方法时实例化Bean。
        生命周期：
            对象创建：当使用对象时，创建新的对象实例
            对象运行：只要对象在使用中，就一直活着
            对象销毁：当对象长时间不用时，被Java的垃圾回收器回收了-->

    <!--init-method：指定类中的初始化方法名称-->
    <!--destroy-method：指定类中销毁方法名称-->
    <!--<bean id="userDao" class="pers.xiaofeng.dao.impl.UserDaoImpl" scope="singleton" init-method="init" destroy-method="destroy"></bean>-->

    <!--静态工厂构造-->
    <!--<bean id="userDao" class="pers.xiaofeng.factory.StaticFactory" factory-method="getUserDao"></bean>-->

    <!--实例化工厂构造-->
    <!--<bean id="factory" class="pers.xiaofeng.factory.DynamicFactory"></bean>-->
    <!--<bean id="userDao" factory-bean="factory" factory-method="getUserDao"></bean>-->

    <!--Bean的依赖注入的三种数据类型：
        普通数据类型
        引用数据类型
        集合数据类型-->

    <!--普通数据类型注入-->
    <!--<bean id="userDao" class="pers.xiaofeng.dao.impl.UserDaoImpl">-->
    <!--    <property name="userName" value="张飞"></property>-->
    <!--    <property name="age" value="18"></property>-->
    <!--</bean>-->

    <bean id="userDao" class="pers.xiaofeng.dao.impl.UserDaoImpl">
        <!-- property：属性注入
        name：属性名称
        value：注入的普通属性值
        ref：注入的对象引用值-->
        <property name="stringList">
            <list>
                <value>刘关张</value>
                <value>赵子龙</value>
                <value>西凉少将军马超</value>
            </list>
        </property>

        <property name="userMap">
            <map>
                <entry key="u1" value-ref="user1"></entry>
                <entry key="u2" value-ref="user2"></entry>
            </map>
        </property>

        <property name="properties">
            <props>
                <prop key="p1">ppp1</prop>
                <prop key="p2">ppp2</prop>
                <prop key="p3">ppp3</prop>
            </props>
        </property>

        <property name="userName" value="廿柒"></property>
        <property name="age" value="18"></property>
    </bean>

    <bean id="user1" class="pers.xiaofeng.domain.User">
        <property name="name" value="Tom"></property>
        <property name="address" value="NewYork"></property>
    </bean>
    <bean id="user2" class="pers.xiaofeng.domain.User">
        <property name="name" value="Lucy"></property>
        <property name="address" value="北京"></property>
    </bean>

    <!--set方法注入-->
    <!--<bean id="userService" class="pers.xiaofeng.service.impl.UserServiceImpl">
        <property name="userDao" ref="userDao"></property>
    </bean>-->

    <!--P命名空间注入-->
    <!--<bean id="userService" class="pers.xiaofeng.service.impl.UserServiceImpl" p:userDao-ref="userDao"/>-->

    <!--有参构造方法注入-->
    <bean id="userService" class="pers.xiaofeng.service.impl.UserServiceImpl">
        <!--constructor-arg标签的属性和property标签的属性相同-->
        <constructor-arg name="userDao" ref="userDao"></constructor-arg>
    </bean>

    <!--<bean id="userService1" class="pers.xiaofeng.service.impl.UserServiceImpl">-->
    <!--    &lt;!&ndash;constructor-arg标签的属性和property标签的属性相同&ndash;&gt;-->
    <!--    <constructor-arg name="userDao" ref="userDao"></constructor-arg>-->
    <!--</bean>-->

    <!--import标签：在Spring主配置文件中通过import标签进行加载其他配置文件-->
    <import resource="applicationContext-user.xml"/>
    <import resource="applicationContext-product.xml"/>


</beans>